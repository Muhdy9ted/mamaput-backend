version: "3"
services:
  jenkins:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jenkins-blueocean
    restart: on-failure
    ports:
      - "8080:8080"
      - "50000:50000"  # Agent communication
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_CERT_PATH: /certs/client
      DOCKER_TLS_VERIFY: "1"
    volumes:
      - jenkins-data:/var/jenkins_home
      - jenkins-docker-certs:/certs/client:ro
    networks:
      - ci-network

  docker:
    image: docker:23-dind
    container_name: docker-dind
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: /certs
    volumes:
      - docker-certs:/certs/client
      - docker-data:/var/lib/docker
    networks:
      - ci-network

  sonarqube:
    image: sonarqube:lts
    container_name: sonarqube
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarDB:5432/sonarqube
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    networks:
      - ci-network

  sonarDB:
    image: postgres:13
    container_name: sonarqube_db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonarqube
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    networks:
      - ci-network

  nexus:
    image: sonatype/nexus3
    container_name: nexus
    restart: on-failure
    ports:
      - "8081:8081"
    volumes:
      - nexus-data:/nexus-data
    networks:
      - ci-network

networks:
  ci-network:
    driver: bridge

volumes:
  jenkins-data:
  jenkins-docker-certs:
  docker-certs:
  docker-data:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_db_data:
  nexus-data:
